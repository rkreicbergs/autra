// This is a generated file

#include "Game/Common/RhythmPhrase.h"
#include <vector>

namespace AutraLib
{
    std::vector<std::vector<int>> RhythmPhrase::AllGroups;
    std::vector<Phrase*> RhythmPhrase::AllPhrases;

    void RhythmPhrase::LoadData()
    {
        AllPhrases.reserve(144);
        AllPhrases.push_back(new RhythmPhrase(22, 1, 1));
        AllPhrases.push_back(new RhythmPhrase(34, 1, 1));
        AllPhrases.push_back(new RhythmPhrase(43, 1, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 1));
        AllPhrases.push_back(new RhythmPhrase(22, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 22));
        AllPhrases.push_back(new RhythmPhrase(22, 22, 22));
        AllPhrases.push_back(new RhythmPhrase(22, 1, 22));
        AllPhrases.push_back(new RhythmPhrase(34, 34, 34));
        AllPhrases.push_back(new RhythmPhrase(34, 34, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 244));
        AllPhrases.push_back(new RhythmPhrase(244, 1, 1));
        AllPhrases.push_back(new RhythmPhrase(244, 1, 244));
        AllPhrases.push_back(new RhythmPhrase(244, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 22, 22));
        AllPhrases.push_back(new RhythmPhrase(1, 244, 1));
        AllPhrases.push_back(new RhythmPhrase(442, 1, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 34));
        AllPhrases.push_back(new RhythmPhrase(4444, 1, 1));
        AllPhrases.push_back(new RhythmPhrase(22, 1, 442));
        AllPhrases.push_back(new RhythmPhrase(43, 244, 244));
        AllPhrases.push_back(new RhythmPhrase(34, 1, 22));
        AllPhrases.push_back(new RhythmPhrase(34, 22, 22));
        AllPhrases.push_back(new RhythmPhrase(22, 244, 244));
        AllPhrases.push_back(new RhythmPhrase(1, 43, 1));
        AllPhrases.push_back(new RhythmPhrase(34, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 43));
        AllPhrases.push_back(new RhythmPhrase(1, 34, 1));
        AllPhrases.push_back(new RhythmPhrase(22, 442, 442));
        AllPhrases.push_back(new RhythmPhrase(43, 1, 22));
        AllPhrases.push_back(new RhythmPhrase(34, 1, 34));
        AllPhrases.push_back(new RhythmPhrase(43, 1, 43));
        AllPhrases.push_back(new RhythmPhrase(34, 1, 4444));
        AllPhrases.push_back(new RhythmPhrase(442, 43, 1));
        AllPhrases.push_back(new RhythmPhrase(442, 244, 4444));
        AllPhrases.push_back(new RhythmPhrase(424, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 424, 22));
        AllPhrases.push_back(new RhythmPhrase(1, 22, 4444));
        AllPhrases.push_back(new RhythmPhrase(1, 4444, 4444));
        AllPhrases.push_back(new RhythmPhrase(4444, 4444, 4444));
        AllPhrases.push_back(new RhythmPhrase(22, 424, 424));
        AllPhrases.push_back(new RhythmPhrase(424, 1, 424));
        AllPhrases.push_back(new RhythmPhrase(4444, 34, 34));
        AllPhrases.push_back(new RhythmPhrase(244, 442, 4444));
        AllPhrases.push_back(new RhythmPhrase(4444, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(22, 43, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 442, 1));
        AllPhrases.push_back(new RhythmPhrase(442, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 442, 22));
        AllPhrases.push_back(new RhythmPhrase(442, 442, 1));
        AllPhrases.push_back(new RhythmPhrase(244, 244, 244));
        AllPhrases.push_back(new RhythmPhrase(43, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 43, 43));
        AllPhrases.push_back(new RhythmPhrase(442, 442, 442));
        AllPhrases.push_back(new RhythmPhrase(442, 244, 244));
        AllPhrases.push_back(new RhythmPhrase(442, 442, 244));
        AllPhrases.push_back(new RhythmPhrase(4444, 442, 244));
        AllPhrases.push_back(new RhythmPhrase(244, 442, 244));
        AllPhrases.push_back(new RhythmPhrase(442, 1, 22));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 4444));
        AllPhrases.push_back(new RhythmPhrase(244, 244, 442));
        AllPhrases.push_back(new RhythmPhrase(442, 442, 43));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 424));
        AllPhrases.push_back(new RhythmPhrase(9, 1, 34));
        AllPhrases.push_back(new RhythmPhrase(4444, 4444, 34));
        AllPhrases.push_back(new RhythmPhrase(4444, 34, 1));
        AllPhrases.push_back(new RhythmPhrase(4444, 43, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 4444, 34));
        AllPhrases.push_back(new RhythmPhrase(442, 9, 1));
        AllPhrases.push_back(new RhythmPhrase(5, 1, 43));
        AllPhrases.push_back(new RhythmPhrase(22, 34, 34));
        AllPhrases.push_back(new RhythmPhrase(3, 442, 3));
        AllPhrases.push_back(new RhythmPhrase(3, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(4444, 1, 3));
        AllPhrases.push_back(new RhythmPhrase(442, 3, 442));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 5));
        AllPhrases.push_back(new RhythmPhrase(1, 9, 424));
        AllPhrases.push_back(new RhythmPhrase(9, 9, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 9, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 3, 3));
        AllPhrases.push_back(new RhythmPhrase(3, 1, 43));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 3));
        AllPhrases.push_back(new RhythmPhrase(1, 3, 5));
        AllPhrases.push_back(new RhythmPhrase(3, 5, 22));
        AllPhrases.push_back(new RhythmPhrase(34, 1, 3));
        AllPhrases.push_back(new RhythmPhrase(3, 3, 5));
        AllPhrases.push_back(new RhythmPhrase(3, 3, 34));
        AllPhrases.push_back(new RhythmPhrase(1, 424, 43));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 9));
        AllPhrases.push_back(new RhythmPhrase(5, 9, 22));
        AllPhrases.push_back(new RhythmPhrase(9, 9, 9));
        AllPhrases.push_back(new RhythmPhrase(7, 1, 22));
        AllPhrases.push_back(new RhythmPhrase(5, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(3, 34, 1));
        AllPhrases.push_back(new RhythmPhrase(5, 34, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 5, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 3, 22));
        AllPhrases.push_back(new RhythmPhrase(9, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(442, 4444, 424));
        AllPhrases.push_back(new RhythmPhrase(424, 43, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 9, 22));
        AllPhrases.push_back(new RhythmPhrase(43, 1, 4444));
        AllPhrases.push_back(new RhythmPhrase(22, 5, 4444));
        AllPhrases.push_back(new RhythmPhrase(34, 1, 43));
        AllPhrases.push_back(new RhythmPhrase(1, 244, 22));
        AllPhrases.push_back(new RhythmPhrase(9, 7, 1));
        AllPhrases.push_back(new RhythmPhrase(3, 5, 1));
        AllPhrases.push_back(new RhythmPhrase(7, 9, 9));
        AllPhrases.push_back(new RhythmPhrase(3, 5, 7));
        AllPhrases.push_back(new RhythmPhrase(9, 5, 5));
        AllPhrases.push_back(new RhythmPhrase(9, 1, 22));
        AllPhrases.push_back(new RhythmPhrase(5, 1, 9));
        AllPhrases.push_back(new RhythmPhrase(1, 34, 22));
        AllPhrases.push_back(new RhythmPhrase(1, 7, 22));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 7));
        AllPhrases.push_back(new RhythmPhrase(43, 1, 7));
        AllPhrases.push_back(new RhythmPhrase(22, 1, 34));
        AllPhrases.push_back(new RhythmPhrase(1, 7, 34));
        AllPhrases.push_back(new RhythmPhrase(1, 7, 1));
        AllPhrases.push_back(new RhythmPhrase(4444, 7, 4444));
        AllPhrases.push_back(new RhythmPhrase(34, 34, 7));
        AllPhrases.push_back(new RhythmPhrase(34, 43, 4444));
        AllPhrases.push_back(new RhythmPhrase(1, 442, 442));
        AllPhrases.push_back(new RhythmPhrase(442, 442, 22));
        AllPhrases.push_back(new RhythmPhrase(1, 1, 442));
        AllPhrases.push_back(new RhythmPhrase(43, 1, 442));
        AllPhrases.push_back(new RhythmPhrase(1, 4444, 442));
        AllPhrases.push_back(new RhythmPhrase(442, 4444, 22));
        AllPhrases.push_back(new RhythmPhrase(442, 244, 442));
        AllPhrases.push_back(new RhythmPhrase(1, 4444, 1));
        AllPhrases.push_back(new RhythmPhrase(244, 244, 43));
        AllPhrases.push_back(new RhythmPhrase(1, 244, 34));
        AllPhrases.push_back(new RhythmPhrase(442, 1, -1));
        AllPhrases.push_back(new RhythmPhrase(244, 34, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 34, -1));
        AllPhrases.push_back(new RhythmPhrase(1, -1, 1));
        AllPhrases.push_back(new RhythmPhrase(-1, 22, 1));
        AllPhrases.push_back(new RhythmPhrase(1, 1, -1));
        AllPhrases.push_back(new RhythmPhrase(-1, 1, 1));
        AllPhrases.push_back(new RhythmPhrase(244, 22, -1));
        AllPhrases.push_back(new RhythmPhrase(1, 34, 43));
        AllPhrases.push_back(new RhythmPhrase(1, -1, 22));
        AllPhrases.push_back(new RhythmPhrase(1, -1, 34));

        AllGroups.reserve(26);
        AllGroups.push_back(std::vector<int>({0, 1, 3, 4}));
        AllGroups.push_back(std::vector<int>({0, 3, 3, 3, 4, 5}));
        AllGroups.push_back(std::vector<int>({0, 2, 3, 3, 5, 5, 6, 6}));
        AllGroups.push_back(std::vector<int>({0, 0, 1, 3, 3, 3, 3, 3, 6, 7}));
        AllGroups.push_back(std::vector<int>({0, 1, 1, 3, 3, 3, 5, 6, 7, 8, 9, 10}));
        AllGroups.push_back(std::vector<int>({2, 3, 3, 3, 3, 3, 4, 10, 10, 11, 12, 12, 13, 14}));
        AllGroups.push_back(std::vector<int>({0, 2, 2, 3, 3, 3, 3, 7, 10, 10, 12, 15, 16, 16, 17, 18}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 3, 3, 3, 5, 10, 11, 12, 15, 17, 19, 20, 21, 22, 23, 24}));
        AllGroups.push_back(std::vector<int>({0, 1, 1, 1, 1, 3, 3, 4, 5, 10, 10, 18, 18, 22, 25, 26, 27, 28, 28, 29}));
        AllGroups.push_back(std::vector<int>({0, 1, 1, 2, 2, 3, 3, 3, 7, 10, 10, 10, 10, 25, 30, 31, 32, 33, 34, 35}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 0, 3, 4, 7, 7, 10, 25, 25, 36, 36, 36, 37, 38}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 1, 1, 1, 1, 9, 10, 10, 10, 25, 25, 28, 28, 36, 39, 40, 41, 42}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 0, 0, 1, 1, 3, 7, 9, 10, 10, 22, 25, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 0, 0, 1, 2, 5, 5, 5, 5, 10, 18, 27, 52, 53, 54, 54, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63}));
        AllGroups.push_back(std::vector<int>({0, 2, 2, 2, 5, 5, 10, 10, 10, 10, 10, 10, 11, 15, 18, 18, 18, 39, 39, 39, 39, 40, 40, 40, 60, 64, 65, 65, 66, 67, 68, 69}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 4, 4, 10, 10, 10, 25, 25, 40, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 7, 10, 10, 15, 18, 18, 18, 18, 18, 30, 32, 73, 73, 79, 80, 81, 82, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 5, 5, 7, 9, 10, 16, 18, 25, 25, 25, 28, 28, 49, 60, 89, 89, 92, 93, 94, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 5, 5, 5, 8, 10, 10, 10, 16, 27, 28, 28, 28, 31, 38, 76, 89, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 5, 10, 10, 10, 18, 18, 22, 22, 25, 25, 27, 27, 89, 114, 115, 115, 115, 116, 117, 118, 119, 120, 121, 122}));
        AllGroups.push_back(std::vector<int>({10, 10, 25, 25, 28, 28, 48, 123}));
        AllGroups.push_back(std::vector<int>({2, 3, 5, 10, 10, 25, 25, 28, 124, 125, 126, 127}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 0, 1, 1, 1, 2, 19, 20, 25, 25, 31, 128, 129, 130}));
        AllGroups.push_back(std::vector<int>({0, 0, 5, 5, 5, 8, 10, 10, 18, 18, 27, 27, 27, 27, 28, 28, 34, 47, 62, 125}));
        AllGroups.push_back(std::vector<int>({0, 0, 0, 1, 1, 3, 4, 10, 10, 11, 11, 14, 18, 18, 18, 18, 18, 27, 27, 45, 123, 130, 131, 132}));
        AllGroups.push_back(std::vector<int>({0, 1, 1, 2, 10, 10, 10, 18, 25, 25, 27, 28, 28, 60, 105, 125, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 142, 143}));
    }
}
